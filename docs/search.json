[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Weather forecast in Montpellier",
    "section": "",
    "text": "#| echo: false\n    #| warning: false\n    from IPython.display import display, HTML\n    import json\n    from datetime import datetime, timedelta\n    #import pandas as pd\n    #import plotly.express as px\n    import numpy as np\n    #import pooch\n    #import zipfile\n    import requests\n    #import schedule\n    import time\n    from dateutil.relativedelta import relativedelta\n    #\n    #def store_data(response_data):\n    #    timestamp = time.time()\n    #    with open('data.json', 'w') as file:\n    #        json.dump({'timestamp': timestamp, 'data': response_data}, file)\n    #\n    #def should_make_api_call():\n    #    try:\n    #        with open('data.json', 'r') as file:\n    #            data = json.load(file)\n    #            last_timestamp = data.get('timestamp', 0)\n    #            now_timestamp = timestamp = time.time()\n    #            return (now_timestamp - last_timestamp) &gt; 90  # 3600 seconds = 1 #hour\n    #    except (FileNotFoundError, json.JSONDecodeError):\n    #        # File doesn't exist or cannot be decoded, make a new API call\n    #        return True\n    ###\n    #if should_make_api_call():\n    #    # Make the API request\n    #    current_time=datetime.now()\n    #    response = requests.get( f\"https://api.open-meteo.com/v1/forecast?latitude=43.6109&longitude=3.8763&hourly=wind_speed_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,wind_direction_10m_dominant&timezone=Europe%2FBerlin\")\n    #\n    #    if response.status_code == 200:\n    #        response_data = response.json()\n    #        # Process and store the data\n    #        store_data(response_data)\n    #    else:\n    #        print(f\"Error: {response.status_code}\")\n    #else:\n    #    # Use the cached data\n    #    with open('data.json', 'r') as file:\n    #        data = json.load(file)\n    #        response_data = data.get('data', {})\n    #        current_time=datetime.utcfromtimestamp(data.get('timestamp', 0))\n\n    #def request_data():\n    #    response = requests.get( f\"https://api.open-meteo.com/v1/forecast?latitude=43.6109&longitude=3.8763&hourly=wind_speed_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,wind_direction_10m_dominant&timezone=Europe%2FBerlin\")\n    #    response.json()\n    #    current_time=datetime.now()\n    #\n    #schedule.every(1).minutes.do(request_data)\n    #while True:\n    #    schedule.run_pending()\n    #    time.sleep(1)\n    response = requests.get( f\"https://api.open-meteo.com/v1/forecast?latitude=43.6109&longitude=3.8763&hourly=wind_speed_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,wind_direction_10m_dominant&timezone=Europe%2FBerlin\")\n    data=response.json()\n    current_time=datetime.now()\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThursday\nToday\n\nFriday\nTomorrow\n\nSaturday\n18 November\n\nSunday\n19 November\n\nMonday\n20 November\n\nTuesday\n21 November\n\nWednesday\n22 November\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTemperatures\nMin :6.7°\nMax : 15.1°\n\nTemperatures\nMin :10.4°\nMax :16.9°\n\nTemperatures\nMin :6.1°\nMax :16.2°\n\nTemperatures\nMin :7.0°\nMax:21.3°\n\nTemperatures\nMin :11.0°\nMax :17.1°\n\nTemperatures\nMin :9.3°\nMax :16.0°\n\nTemperatures\nMin :7.6°\nMax :14.3°\n\n\n\n7 km/h\nDirection :\n\n\n\n\n\n\n\n13 km/h\nDirection :\n\n\n\n\n\n\n\n4 km/h\nDirection :\n\n\n\n\n\n\n\n8 km/h\nDirection :\n\n\n\n\n\n\n\n11 km/h\nDirection :\n\n\n\n\n\n\n\n17 km/h\nDirection :\n\n\n\n\n\n\n\n19 km/h\nDirection :\n\n\n\n\n\n\n\n\n\nPrecipitation\n 0.8 mm\nPrecipitation\n 0.0 mm\nPrecipitation\n 0.0 mm\nPrecipitation\n 0.0 mm\nPrecipitation\n 0.0 mm\nPrecipitation\n 0.0 mm\nPrecipitation\n 0.0 mm\n\n\n\n\n\n\n\nComputation was performed at : 2023-11-16 21:39:47 (GMT)\n\n\nSources are: Open meteo"
  }
]